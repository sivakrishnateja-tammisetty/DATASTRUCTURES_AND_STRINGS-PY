                                                                                             1. DICTIONARY
                                                                                               -------------

*Dict has key value pair form of data.
* Dict's are orderd (python 3.7 & above version).
*Does not support indexing.
*Data can be accessing using key.

* WAYS TO CREAT DICT:
 -------------------

  * 1st way ==>  d=dict()
  *2nd way ==>  d={}



Eg:
d={}
print(d)  o/p: {}

d=dict()
print(d)   o/p:{}


d={'key1':1,'key2':2,'key3':3}
print(d) o/p: {'key1':1,'key2':2,'key3':3}
print(d['key2']) o/p: 2




*for checking type():
 --------------------
*syntax ==> type()

d={'a':'apple','b':'ball','c':'cat'}
print(type(d),d)

o/p: <class 'dict'> {'a':'apple','b':'ball','c':'cat'}



*To find length:
 --------------

*syntax ==> len()


Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(len(d))



*Updating dictionary:
 --------------------
 *while updating value ,key was not there in dict,then it will add in dict.
 *if key was already exist in dict,then it will update the value.

 Eg:
 d={'a':'apple','b':'ball','c':'cat'}
 print(d)
 d['b']="bat"
 print(d)

o/p:
{'a':'apple','b':'ball','c':'cat'}
{'a':'apple','b':'bat','c':'cat'}



*Updating mutliple values:
 --------------------------
* we can use update method.
*syntax  ==> d.update()


Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d)
new={'d':"dog",'e':"eagle"}
d.update(new)
print(d)

o/p:
{'a':'apple','b':'ball','c':'cat'}
{'a':'apple','b':'ball','c':'cat','d':'dog','e':'eagle'}



* DELETION OPERATIONS IN DICT(pop(key) , popitem() , del() ):
  ----------------------------------------------------------

 *pop(key):
  --------
 *It will remove specified key from dict and return that corresponding value.
 *If key was not found it will return default if given, otherwise KeyError.

 Eg:
 d={'a':'apple','b':'ball','c':'cat'}
 print(d.pop('b'))
 print(d.pop('g',"Not found"))
 print(d.pop('g')) 


o/p:
ball
Not found
key Error




*popitem()
 ----------
*It deletes the last item of the dictionary & returns that last item.

Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d.popitem())
print(d)

o/p:
('c', 'cat')
{'a':'apple', 'b':'ball'}





* DELETE AN ELEMENT FROM DICT :
  ----------------------------

  * to delete an element in dict, you can use del().
  *syntax ===> del(d[key])


 Eg:
 d={'a':'apple','b':'ball','c':'cat'}
 del(d['c']) ==> to delete particuar key element
 print(d)  #o/p: {'a': 'apple', 'b': 'ball'}
 del(d) ==> to delete entire dict
 print(d) o/p: Name Error d was not found




* ITREATION IN DICT:
  ------------------

Eg:
d={'a':'apple','b':'ball','c':'cat'}
for i in d:
    print(i)


o/p:
a
b
c
    
d={'a':'apple','b':'ball','c':'cat'}    
for j in d:
    print(j,d[j])

o/p: a apple
     b ball
     c cat


* printing key and value using dict.items():
  *syntax ==> dict.items()


Eg:
d={'a':'apple','b':'ball','c':'cat'}
for key,value in d.items():
    print(key,value)


o/p:
a apple
b ball
c cat







* printing dict elements using items():
  ------------------------------------

Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d.items())



o/p:
[('a','apple'),('b','ball'),('c','cat')]













                                                                                   DICTIONARIES FUNCTIONS:
                                                                                    ---------------------



* ADDING ELEMENTS TO DICT:
  -----------------------
 * syntax ==> d[key]=value

 Eg:
 d={'a':'apple','b':'ball','c':'cat'}
 print(d) o/p: {'a': 'apple', 'b': 'ball', 'c': 'cat'}
 d['d']='dog'
 print(d) o/p: {'a': 'apple', 'b': 'ball', 'c': 'cat', 'd': 'dog'}







* CHECKING WHETHER KEY IS PRESENT IN DICT OR NOT:
  ----------------------------------------------
 *syntax ==> key in dictionary
 * It will return True/False

 Eg:
 d={'a':'apple','b':'ball','c':'cat'}
 print( 'a' in d)  o/p: True
 print(' g' in d) o/p: False


* TO GET ALL KEYS  AND ALL VALUES FROM DICT:
  -----------------------------------------
*syntax ==> d.keys()

Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d.keys())

o/p: dict_keys(['a', 'b', 'c'])


*syntax ==> d.values()


Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d.values())

o/p: dict_values(['apple', 'ball', 'cat'])




*ACCESSING DICT DATA IN 2 WAYS:
 -----------------------------

 *1st way ==> using key
 *2nd way ==> using get()

 * We are using get method to avoid error (KeyError).

 *syntax ==> d[key]
 *syntax ==> d.get(key)  (or) d.get(key,"msg")

*NOTE: accessing using key,if key was not found ,then its show key error. To avoid that KeyError ,we use get() method,it will not through error its show None or we want to display our own msg.


Eg:
d={'a':'apple','b':'ball','c':'cat'}
print(d['d'])   o/p: KeyError
print(d.get('d')) o/p: None



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


                                                                                         2. LIST
                                                                                            ----


*Ordered collection of data.
*Lists are mutuable type of data structure.
*It can conatin multiple type of data.
* Lists are changable(mutuable).
*Lists are iterable.
print(d.get('d',"Not Found"))


*CREATION OF LIST:
-----------------
*creating of list can be done in 2 ways:
  1st way ==> using []
  2nd way ==> using list()




Eg:
l=[]
print(l)
l_colors=['red','blue','green']
print(l_colors)
l_mixed=[1,"siva",29.5]
print(l_mixed)
 o/p:
[]
['red','blue','green']
[1,'siva',29.5]






                                                      LIST OPERATIONS
                                                      ----------------



* using '+' operator(concatenation):


Eg:
l_colors=['red','blue','green']
l_mixed=[1,"siva",29.5]
print(l_colors+l_mixed)


o/p:
['red','blue','green',a,'siva',29.5]



* updating existing value using index(Lists are mutable):

Eg:
l_colors=['red','blue','green']
print(l_colors)
l_colors[0]='Orange'
print(l_colors)


* List repitition using(*):

Eg:
l_colors=['red','blue','green']
print(l_colors*2)
 o/p:
['red','blue','green','red','blue','green']



*Checking particular element was present in list or not using ('in'):

  Eg:
  l_colors=['red','blue','green']
  print('blue' in l_colors)
  print('orange' in l_colors)


o/p:
True
False



 LIST FUNCTIONS:
   ---------------


 *append() :To add element at last index.with append we can add only 1 element at a time.
 *extend() :It adds two lists into single list. l.extend([v1,v2,...]). we can add multiple values with extend method.
 * remove() : It will removes the given object from our list.
 * del     : with del we can remove mutltiple values.
 *clear() :It will clear all the elements from the list and list was empty.
 *pop() :It will remove last element from list.
 *pop(index) : It will remove particular given index element.
 *insert(index,value) : It will insert element at particular index.
 *sort() :It will sort our list.By default it will sort in ascending order.
 *reverse() :It will reverse the list.
 *index(value) : It will given index of the specified element from list. if the specified element was not there in list,then it gives ValueError.
 *len() :It will return length of the list.
 *count() : It will return the no.of times  an object occurs in a list,if it was not present in list, then it will return 0.



Eg:
l=['red','blue','green']
l.append(30)
l.extend([90])
l.extend([80,40])
print(l)

o/p:
['red','blue','green',30,90,80,40]


Eg:
l=['red','blue','green',10,20,30]
l.remove('blue')
l.remove(10)
print(l)

o/p:
['red','green',20,30]


Eg:
l=['red','blue','green',10,20,30,70,90]
del l[0:2]
print(l)

o/p:
['green',10,20,30,70,90]



Eg:
l=['red','blue','green',10,20,30,70,90]
l.clear()
print(l)

o/p:
[]


Eg:
l=['red','blue','green',10,20,30,70,90]
l.pop()
l.pop(1)
print(l)

o/p:
['red','green',10,20,30,70]




Eg:
l=[10,20,30,70,90]
l.insert(1,15)
print(l)

o/p:
[10,15,20,30,70,90]



Eg:
l=[10,5,1.5,30,20,70,90]
l.sort()
print(l)

o/p:
[1.5,5,10,20,30,70,90]


Eg:
l=[10,5,1.5,30,20,70,90]
l.reverse()
print(l)

o/p:
[90,70,20,30,1.5,5,10]

Eg:
l=[10,5,1.5,30,20,70,90]
print(l.index(1.5))

o/p:
2

l=[10,5,1.5,30,20,70,90]
print(l.index(0))

o/p:
ValueError: 0 is not in list


Eg:
l=[10,5,1.5,30,20,70,90]
print(len(l))

o/p:
7



Eg:
l=[10,5,1.5,5,30,20,70,90]
print(l.count(5))
print(l.count(100))

o/p:
2
0






LIST SLICING:
-------------
 *obtaining a subpart of lsit.
 *syntax ==> variable[start:end] or [start:end:interval/difference]
 * If we didnt mention start index, by default it will take from 0 index.
 *If we didn't mention end index,by default it take end+1 index.

Eg:
l=[10,20,30,40,50,60,70]
print(l[0:5])

o/p:
[10,20,30,40,50]

print(l[:5])

o/p:
[10,20,30,40,50]

 l=[10,20,30,40,50,60,70]
print(l[4:7])
print(l[4:])

o/p:
[50,60,70]
[50,60,70]


Eg:

l=[10,20,30,40,50,60,70]
print(l[0:5:2])

o/p:
[10,30,50]

l=[10,20,30,40,50,60,70]



print(l[0:5:3])

o/p:
[10,40]




LIST COMPREHENSION:
-----------------
  *List comprehension will convert multiple lines of code into single line.



  Eg:
  l=[]
for i in range(5):
    z=i*i
    l.append(z)
print(l)

o/p:
[0,1,4,9,16]

*syntax:

        [expression for item in list test_expression]



Eg:
l=[i**2 for i in range(5)]
print(l)
 o/p:
[0,1,4,9,16]




l=[i**2 for i in range(5) if i%2==0]
print(l)

o/p:
[0,4,16]






